#pragma once
#include "../EnemyBase.h"
#include <map>
#include <string>
class ActorManager;
class Input;
class GameCamera;
class EnemyManager;
class AttackManager;
class ActorManager;
class CharacterStateBase;
class BossKing :
	public EnemyBase
{
public:
	BossKing(int modelHandle, int transHandle, Vector3 pos);
	~BossKing();
	//初期化処理
	void Init()override;
	//衝突イベント
	void OnCollide(const std::shared_ptr<Collidable> other)override;
	//更新処理の確定
	void Complete() override;
	//死亡処理
	void Dead(const std::weak_ptr<ActorManager> actorManager, const std::weak_ptr<Score> score) override;
	//終了処理
	void End()override;
	//リジッドボディ
	std::shared_ptr<Rigidbody> GetRb() const { return m_rb; }
	//コリジョン
	std::shared_ptr<ColliderBase> GetColl() const { return m_collisionData; }
	//コリジョンの状態を設定
	void SetCollState(CollisionState collState) { m_collState = collState; }
	//ターゲットのデータ
	TargetData GetTargetData() const { return m_targetData; };
	//壁に当たったか
	bool IsWall() const { return m_isWall; }
	//ゲームの進行に使う関数
	//ゲーム開始アニメーションをしている
	bool IsStartAnim();
	//変身
	void TransformSecond();
	//全回復
	//体力全回復
	void FullRecovery();
private:
	//変身モデル
	int m_transHandle;
	//サウンド初期化
	void InitSound() override;
};

